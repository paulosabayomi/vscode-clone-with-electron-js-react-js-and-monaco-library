import { app, BrowserWindow, ipcMain, dialog, Menu, MenuItem, MenuItemConstructorOptions } from 'electron';
import fs from 'fs'
import os from 'os'
import path from 'path'
import Store from 'electron-store';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const SELECTED_FOLDER_STORE_NAME = 'selected-folder'
const store = new Store();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const isMac = process.platform === 'darwin'

const template = [
  // { role: 'appMenu' }
  ...(isMac
    ? [{
        label: app.name,
        submenu: [
          { role: 'about' },
          { label: 'Check For Update...' },
          { type: 'separator' },
          { label: 'Settings',
            submenu: [
              {
                label: "Profiles Default",
                submenu: [
                  {
                    label: 'Default',
                    type: 'checkbox',
                    checked: true
                  },
                  {
                    type: 'separator'
                  },
                  {
                    label: 'Show Profile Content',
                    type: 'checkbox',
                    checked: false
                  },
                  {
                    type: 'separator'
                  },
                  {
                    label: 'Show Profile',
                    type: 'checkbox',
                    checked: false
                  },
                  {
                    label: 'Delete Profile',
                    type: 'checkbox',
                    checked: false,
                    enabled: false
                  },
                  {
                    type: 'separator'
                  },
                  {
                    label: 'Export',
                    type: 'checkbox',
                    checked: false
                  },
                  {
                    label: 'Import',
                    type: 'checkbox',
                    checked: false,
                  },
                ]
              },
              {label: 'Settings'},
              {label: 'Extensions'},
              {label: 'Keyboard Shortcuts'},
              {label: 'Configure User Snippets'},
              {label: 'User Tasks'},
              {
                label: 'Theme',
                submenu: [
                  {label: 'Color Theme'},
                  {label: 'File Icon Theme'},
                  {label: 'Product Icon Theme'}
                ]
              },
              {type: 'separator'},
              {label: 'Online Services Settings'},
              {type: 'separator'},
              {label: 'Backup and Sync Settings'},
            ]
          },
          { type: 'separator' },
          { role: 'services' },
          { type: 'separator' },
          { role: 'hide' },
          { role: 'hideOthers' },
          { role: 'unhide' },
          { type: 'separator' },
          { role: 'quit' }
        ]
      }]
    : []),
  // { role: 'fileMenu' }
  {
    label: 'File',
    submenu: [
      {label: 'New Text File'},
      {label: 'New File'},
      {label: 'New Window'},
      {type: 'separator'},
      {label: 'Open...'},
      {label: 'Open Folder...', click: async () => {
        const folder = await dialog.showOpenDialog(mainWindow, {properties: ['openDirectory']})
        let structure = undefined;
        if (!folder.canceled) {
          console.log("folder", folder.filePaths[0]);
          const tree = get_files(folder.filePaths[0])
          structure = {
            // name: path.dirname(folder.filePaths[0]),
            name: folder.filePaths[0],
            root: folder.filePaths[0],
            tree,
          }  
          // @ts-ignore
          store.set(SELECTED_FOLDER_STORE_NAME, structure)
          // ipcMain.emit('new-folder-opened')
          mainWindow.webContents.send('new-folder-opened')
        }
      }},
      {label: 'Open Workspace From File...'},
      {label: 'Open Recent', submenu: [
        {label: 'Recent File'}
      ]},
      {type: 'separator'},
      {label: 'Add Folder to Workspace'},
      {label: 'Save Workspace As'},
      {label: 'Duplicate Workspace'},
      {type: 'separator'},
      {label: 'Save'},
      {label: 'Save As...'},
      {label: 'Save All'},
      {type: 'separator'},
      {label: 'Share', submenu: [
        {label: "Export Profile..."},
        {label: "Import Profile..."}
      ]},
      {type: 'separator'},
      {label: 'Autosave', type: 'checkbox', checked: true},
      {type: 'separator',},
      {label: 'Revert File'},
      isMac ? {label: 'Close Editor', role: 'close' } : {label: 'Close Editor', role: 'quit' },
      {label: 'Close Folder', role: isMac ? 'close' : 'quit'},
      isMac ? { role: 'close' } : { role: 'quit' }
    ]
  },
  {
    label: 'Edit',
    submenu: [
      { role: 'undo' },
      { role: 'redo' },
      { type: 'separator' },
      { role: 'cut' },
      { role: 'copy' },
      { role: 'paste' },
      ...(isMac
        ? [
            { role: 'pasteAndMatchStyle' },
            { role: 'delete' },
            { role: 'selectAll' },
            { type: 'separator' },
            {
              label: 'Speech',
              submenu: [
                { role: 'startSpeaking' },
                { role: 'stopSpeaking' }
              ]
            }
          ]
        : [
            { role: 'delete' },
            { type: 'separator' },
            { role: 'selectAll' }
          ])
    ]
  },
  // { role: 'editMenu' }
  {
    label: 'Selection',
    submenu: [
      { role: 'selectAll' },
      { label: 'Expand Selection' },
      { label: 'Shrink Selection' },
      { type: 'separator' },
      { label: 'Copy Line Up' },
      { label: 'Copy Line Down' },
      { label: 'Move Line Up' },
      { label: 'Move Line Down' },
      { label: 'Duplicate Selection' },
      { type: 'separator' },
      { label: 'Add Cursor Above' },
      { label: 'Add Cursor Below' },
      { label: 'Add Cursor to Line Ends' },
      { label: 'Add Next Occurrence' },
      { label: 'Add Previous Occurrence' },
      { label: 'Select All Occurrence' },
      { type: 'separator' },
      { label: 'Switch '+ (isMac ? 'Cmd+Click' : "Control+Click") +' to Multi-Cursor' },
      { label: 'Column Selection Mode' },
    ]
  },
  {
    label: 'View',
    submenu: [
      { label: 'Command Pallete' },
      { label: 'Open View' },
      { type: 'separator' },
      { label: 'Apperance', submenu: [
        {label: "Full Screen"},
        {label: "Zen Mode"},
        {label: "Center Layout"},
      ] },
      { label: 'Editor Layout', submenu: [
        {label: "Split Up"},
        {label: "Split Down"},
        {label: "Split Left"},
        {label: "Split Right"},
        { type: 'separator' },
        {label: "Split In Group"},
        { type: 'separator' },
        {label: "Move Editor into New Window"},
        {label: "Copy Editor into New Window"},
        { type: 'separator' },
        {label: "Single"},
        {label: "Two Columns"},
        {label: "Three Columns"},
        {label: "Two Rows"},
        {label: "Grid (2x2)"},
        {label: "Two Rows Right"},
        {label: "Two Columns Bottom"},
      ] },
      { type: 'separator' },
      { label: 'Explorer' },
      { label: 'Search' },
      { label: 'Source Control' },
      { label: 'Run' },
      { label: 'Extensions' },
      { type: 'separator' },
      { label: 'Problems' },
      { label: 'Output' },
      { label: 'Debug Console' },
      { label: 'Teminal' },
      { type: 'separator' },
      { label: 'Word Wrap' },
    ]
  },
  // { role: 'windowMenu' }
  {
    label: 'Go',
    submenu: [
      { label: 'Back' },
      { label: 'Forward', enabled: false },
      { label: 'Last Edit Location' },
      { label: 'Switch Editor', submenu: [
        {label: "Next Editor"},
        {label: "Previous Editor"},
        {type: 'separator'},
        {label: "Next Used Editor"},
        {label: "Previous Used Editor"},
        {type: 'separator'},
        {label: "Next Editor in Group"},
        {label: "Previous Editor in Group"},
        {type: 'separator'},
        {label: "Next Used Editor in Group"},
        {label: "Previous Used Editor in Group"},
      ] },
      { label: 'Switch Group', submenu: [
        {label: 'Group 1'},
        {label: 'Group 2'},
        {label: 'Group 3', enabled: false},
        {label: 'Group 4', enabled: false},
        {label: 'Group 5', enabled: false},
        {type: 'separator'},
        {label: 'Next Group', enabled: false},
        {label: 'Previous Group', enabled: false},
        {type: 'separator'},
        {label: 'Group Left', enabled: false},
        {label: 'Group Right', enabled: false},
        {label: 'Group Above', enabled: false},
        {label: 'Group Below', enabled: false},
      ] },
      {type: 'separator'},
      { label: 'Go to File' },
      { label: 'Go to Symbol in Workspace' },
      {type: 'separator'},
      { label: 'Go to Symbol in Editor' },
      { label: 'Go to Definition' },
      { label: 'Go to Declaration' },
      { label: 'Go to Type Definition' },
      { label: 'Go to Implementations' },
      { label: 'Go to References' },
      {type: 'separator'},
      { label: 'Go to Line/Column' },
      { label: 'Go to Bracket' },
      {type: 'separator'},
      { label: 'Next Problem' },
      { label: 'Previous Problem' },
      {type: 'separator'},
      { label: 'Next Change' },
      { label: 'Previous Change' },      
    ]
  },
  {
    label: 'Run',
    submenu: [
      { label: 'Start Debugging' },
      { label: 'Run Without Debugging' },
      { label: 'Stop Debugging', enabled: false },
      { label: 'Restart Debugging', enabled: false },
      {type: 'separator'},
      { label: 'Open Configuration', enabled: false },
      { label: 'Add Configuration', enabled: true },
      {type: 'separator'},
      { label: 'Step Over', enabled: false },
      { label: 'Step Into', enabled: false },
      { label: 'Step Out', enabled: false },
      { label: 'Continue', enabled: false },
      {type: 'separator'},
      { label: 'Toggle Breakpoint', },
      { label: 'New Breakpoint', },
      { role: 'zoom', submenu: [
        {label: 'Conditional Breakpoint'},
        {label: 'Edit Breakpoint'},
        {label: 'Inline Breakpoint'},
        {label: 'Function Breakpoint...'},
        {label: 'Logpoint...'},
      ] },
      {type: 'separator'},
      { label: 'Enable All Breakpoints', },
      { label: 'Disable All Breakpoints', },
      { label: 'Remove All Breakpoints', },
      {type: 'separator'},
      { label: 'Install Additional Debugger...', },
    ]
  },
  {
    label: 'Terminal',
    submenu: [
      { label: 'New Teminal' },
      { label: 'Split Teminal', enabled: false },
      {type: 'separator'},
      { label: 'Run Task', },
      { label: 'Run Build Task', },
      { label: 'Run Active Task', },
      { label: 'Run Selected Task', },
      {type: 'separator'},
      { label: 'Show Running Task', enabled: false },
      { label: 'Restart Running Task', enabled: false },
      { label: 'Terminate Task', enabled: false },
      {type: 'separator'},
      { label: 'Configure Task...', enabled: false },
      { label: 'Configure Default Build Task...', enabled: false },
      { role: 'zoom' },
    ]
  },
  {
    label: 'Window',
    submenu: [
      { role: 'minimize' },
      { role: 'zoom' },
      {label: 'Tile Window to Left of Screen'},
      {label: 'Tile Window to Right of Screen'},
      {label: 'Replace Tiled Window'},
      {type: 'separator'},
      {label: 'Remove Window From Set', enabled: false},
      {type: 'separator'},
      {label: 'Switch Window'},
      {type: 'separator'},
      {label: 'Bring All Front'},
    ]
  },
  {
    role: 'help',
    submenu: [
      { label: 'Welcome',},
      { label: 'Show All Commands',},
      { label: 'Documentation',},
      { label: 'Editor Playground',},
      { label: 'Show Release Notes',},
      {type: 'separator'},
      { label: 'Keyboard Shortcuts Reference',},
      { label: 'Video Tutorials',},
      { label: 'Tips and Tricks',},
      {type: 'separator'},
      { label: 'Join Us on YouTube',},
      { label: 'Switch Feature Request',},
      { label: 'Report Issue',},
      {type: 'separator'},
      { label: 'View License',},
      { label: 'Privacy Statement',},
      {type: 'separator'},
      { label: 'Toggle Developer Tools',},
      { label: 'Open Process Explorer',},
    ]
  }
] as unknown as MenuItem[]

const menu = Menu.buildFromTemplate(template)
Menu.setApplicationMenu(menu)

const get_files = (path: string) => {
  const files = fs.readdirSync(path, {
    recursive: true,
    withFileTypes: true
  })
  // return files.map(file => ({...file, is_dir: file.isDirectory(), is_symlink: file.isSymbolicLink()})).filter(file => file.name != '.git')
  return files.map(file => ({...file, is_dir: file.isDirectory(),})).filter(file => file.name != '.git')
}

ipcMain.handle('get-folder', async (event, data) => {
  // @ts-ignore
  return store.get(SELECTED_FOLDER_STORE_NAME)
})

ipcMain.on('clear-folder', () => {
  // @ts-ignore 
  store.delete(SELECTED_FOLDER_STORE_NAME)
})

ipcMain.on('create-file', async (event, data) => {
  //   path: data.path,
  // fileName: string
  //   rootPath:  data.rootPath
  
  const new_file = fs.writeFileSync(data.path, '')

  const tree = get_files(data.rootPath)
  const structure = {
    // name: path.dirname(data.rootPath),
    name: data.rootPath,
    root: data.rootPath,
    tree,
  }  
  // @ts-ignore
  store.set(SELECTED_FOLDER_STORE_NAME, structure)

  const newfile = {
    name: data.fileName,
    parentPath: data.path,
    path: data.path,
    is_dir: false
  }

  event.sender.send('command-update-folder-structure', newfile)
})

ipcMain.handle('get-file-content', async (event, path) => {
  const file_content = fs.readFileSync(path, 'utf8')
  return file_content
})

ipcMain.on('folder-contextmenu', async (event, data) => {
  const template = [
    {
      label: 'Open to the Side...',
      visible: data.type == 'file',
    },
    {
      label: 'Open with...',
      visible: data.type == 'file'
    },
    {
      label: 'New File...',
      click: () => { event.sender.send('command-create-file', data) },
      visible: data.type == 'folder',
     
    },
    {
      label: 'New Folder...',
      visible: data.type == 'folder'
    },
    {
      label: 'Reveal in Finder',
      visible: os.platform() == 'darwin'
    },
    {
      label: 'Open in Integrated Terminal',
    },
    { type: 'separator' },
    { 
      label: 'New Java File',  
      visible: data.type == 'folder',
      submenu: [
        {label: 'Class...'},
        {label: 'Interface...'},
        {label: 'Enum...'},
        {label: 'Record...'},
        {label: 'Annotation...'},
        {label: 'Abstract Class...'},
      ]
    },
    {
      label: 'New Java Package...',
      visible: data.type == 'folder',
    },
    {
      label: 'New Java Project...',
      visible: data.type == 'folder',
    },
    { 
      label: 'Maven',  
      submenu: [
        {label: 'New Project...', visible: data.type == 'folder'},
        {label: 'New Module...'},
      ]
    },
    { type: 'separator', },
    {
      label: 'Select for Compare',
      visible: data.type == 'file',
    },
    {
      label: 'Find in Folder',
      visible: data.type == 'folder',
      role: 'fileMenu'
    },
    { type: 'separator', visible: data.type == 'file', },
    {
      label: 'Find File References',
      visible: data.type == 'file',
    },
    { type: 'separator', visible: data.type == 'file', },
    {
      label: 'Open Timeline',
      visible: data.type == 'file',
    },
    { type: 'separator' },
    {
      label: 'Cut',
      role: 'cut'
    },
    {
      label: 'Copy',
      role: 'copy'
    },
    {
      label: 'Paste',
      enabled: false,
      role: 'paste'
    },
    { type: 'separator' },
    {
      label: 'Copy Path',
      role: 'copy'
    },
    {
      label: 'Copy Relative Path'
    },
    { type: 'separator' },
    { label: 'Rename', 'role': 'editMenu' },
    { label: 'Delete', role: 'delete' },
  ] as unknown as MenuItem[]

  const menu = Menu.buildFromTemplate(template)
  menu.popup({ window: BrowserWindow.fromWebContents(event.sender), })
})

ipcMain.on('save-file', async (event, data) => {
  const file_content = fs.writeFileSync(data.path, data.content)
  console.log("file writen");  
})

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    frame: false,
  });

  // mainWindow.setWindowButtonPosition()
  mainWindow.setWindowButtonVisibility(true)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  ipcMain.handle('open-folder', async (event, data) => {
    const folder = await dialog.showOpenDialog(mainWindow, {properties: ['openDirectory']})
    let structure = undefined;
    if (!folder.canceled) {
      console.log("folder", folder.filePaths[0]);
      const tree = get_files(folder.filePaths[0])
      structure = {
        // name: path.dirname(folder.filePaths[0]),
        name: folder.filePaths[0],
        root: folder.filePaths[0],
        tree,
      }  
      // @ts-ignore
      store.set(SELECTED_FOLDER_STORE_NAME, structure)
    }

    return structure;    
  })

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
